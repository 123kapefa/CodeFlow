// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TagService.Infrastructure.Data;

#nullable disable

namespace TagService.Infrastructure.Migrations
{
    [DbContext(typeof(TagServiceDbContext))]
    [Migration("20250730192132_Add_RabbitMQ_Outbox")]
    partial class Add_RabbitMQ_Outbox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxStates");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxStates");
                });

            modelBuilder.Entity("TagService.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountQuestion")
                        .HasColumnType("integer");

                    b.Property<int>("CountWotchers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DailyCountUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DailyRequestCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("WeeklyCountUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeeklyRequestCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "Язык C#",
                            Name = "csharp",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "ASP.NET Core 9",
                            Name = "asp.net-core",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "Entity Framework Core",
                            Name = "entity-framework",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "LINQ‑выражения",
                            Name = "linq",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 5,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "SQL‑запросы",
                            Name = "sql",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 6,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "PostgreSQL",
                            Name = "postgresql",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 7,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "Контейнеризация",
                            Name = "docker",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 8,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "Очереди RabbitMQ",
                            Name = "rabbitmq",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 9,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "REST‑API",
                            Name = "rest",
                            WeeklyRequestCount = 0
                        },
                        new
                        {
                            Id = 10,
                            CountQuestion = 0,
                            CountWotchers = 0,
                            CreatedAt = new DateTime(2025, 7, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            DailyRequestCount = 0,
                            Description = "Микросервисная арх‑ра",
                            Name = "microservices",
                            WeeklyRequestCount = 0
                        });
                });

            modelBuilder.Entity("TagService.Domain.Entities.UserTagParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnswersWritten")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuestionsCreated")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("UserTagParticipations");
                });

            modelBuilder.Entity("TagService.Domain.Entities.UserTagParticipationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserTagParticipationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserTagParticipationId");

                    b.ToTable("UserTagParticipationQuestions");
                });

            modelBuilder.Entity("TagService.Domain.Entities.WatchedTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("WatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("WatchedTags");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId");
                });

            modelBuilder.Entity("TagService.Domain.Entities.UserTagParticipation", b =>
                {
                    b.HasOne("TagService.Domain.Entities.Tag", "Tag")
                        .WithMany("UserTagParticipations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TagService.Domain.Entities.UserTagParticipationQuestion", b =>
                {
                    b.HasOne("TagService.Domain.Entities.UserTagParticipation", "UserTagParticipation")
                        .WithMany("UserTagParticipationQuestions")
                        .HasForeignKey("UserTagParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTagParticipation");
                });

            modelBuilder.Entity("TagService.Domain.Entities.WatchedTag", b =>
                {
                    b.HasOne("TagService.Domain.Entities.Tag", "Tag")
                        .WithMany("WatchedTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TagService.Domain.Entities.Tag", b =>
                {
                    b.Navigation("UserTagParticipations");

                    b.Navigation("WatchedTags");
                });

            modelBuilder.Entity("TagService.Domain.Entities.UserTagParticipation", b =>
                {
                    b.Navigation("UserTagParticipationQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
